#!/usr/bin/env python

import sys
#local code
sys.path.insert(0, "../../src")
import argparse

import ConfigParser
from monsta import MONSTA_VERSION,MainController,MonstaHelp,RunOnce
from monsta.daemon import DaemonStuff
import logging
import logging.config
import monsta.funkyconsole
import sys
import os

monstaconfigfile='/etc/monsta/monsta.conf'
dconfdir='/etc/monsta/conf.d'
monstaloggingfile='/etc/monsta/logging.conf'


argparser = argparse.ArgumentParser(description='monsta checker',add_help=False)
argparser.add_argument('--version',action='store_true')
argparser.add_argument('--lint',action='store_true')
argparser.add_argument('--help',nargs='*')
argparser.add_argument('--run')

cmdargs=argparser.parse_args()

if cmdargs.version:
    print "Monsta Version %s"%MONSTA_VERSION
    sys.exit(0)        

if cmdargs.help is not None:
    mh=MonstaHelp(ConfigParser.ConfigParser())
    mh.command(cmdargs.help)
    sys.exit(0) 


config=ConfigParser.ConfigParser()
if not os.path.exists(monstaconfigfile):
    print """Configfile (%s) not found. Please create it by renaming the .dist file and modifying it to your needs"""%monstaconfigfile
    sys.exit(1)
readconfig=config.readfp(open(monstaconfigfile))
#load conf.d
if os.path.isdir(dconfdir):
    filelist=os.listdir(dconfdir)
    configfiles=[dconfdir+'/'+c for c in filelist if c.endswith('.conf')]
    readfiles=config.read(configfiles)

if cmdargs.run:
    lev = logging.DEBUG
    logging.basicConfig(level=lev)
    runner=RunOnce(config)
    runner.run(cmdargs.run)
    sys.exit(0)



lint=cmdargs.lint


daemon=DaemonStuff('/var/run/monsta.pid')
daemonize = False
if config.getboolean('main', 'daemonize') and not lint:
    daemonize = True
    
if daemonize:
    daemon.createDaemon()

if lint:
    # define a Handler which writes INFO messages or higher to the sys.stderr
    console = logging.StreamHandler()
    console.setLevel(logging.DEBUG)
    # set a format which is simpler for console use
    formatter = logging.Formatter('%(name)-12s: %(levelname)-8s %(message)s')
    # tell the handler to use this format
    console.setFormatter(formatter)
    # add the handler to the root logger
    logging.getLogger('').addHandler(console)
    fc=monsta.funkyconsole.FunkyConsole()
    print fc.strcolor("monsta", "yellow"),
    print fc.strcolor(MONSTA_VERSION, "green")
    print "----------",fc.strcolor("LINT MODE", (fc.MODE["blink"],fc.FG["magenta"])),"----------"
else:
    if os.path.exists(monstaloggingfile):
        logging.config.fileConfig(monstaloggingfile)
    else:
        syslog = logging.handlers.SysLogHandler('/dev/log', logging.handlers.SysLogHandler.LOG_DAEMON)
        syslog.setLevel(logging.DEBUG)
        formatter = logging.Formatter("monsta[%(process)d]: %(message)s")
        syslog.setFormatter(formatter)
        logging.getLogger('').addHandler(syslog)
        logging.getLogger('').setLevel(logging.INFO)
        #logging.basicConfig(level=logging.INFO)

#drop privileges
baselogger=logging.getLogger('')
baselogger.info("monsta Version %s starting up"%MONSTA_VERSION)

try:
    running_user=config.get('main','user')
    running_group=config.get('main','group')
except Exception:
    running_user='nobody'
    running_group='nobody'
if daemonize:
    daemon.drop_privs(running_user,running_group)

controller=MainController(config)
    
if lint:
    controller.lint()
    print "lint complete"
else:
    try:
        controller.startup()
    except KeyboardInterrupt:
        controller.stayalive = False

